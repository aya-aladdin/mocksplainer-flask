import os
import json
import urllib.request # Added for Hack Club API calls
from flask import Flask, render_template, redirect, url_for, flash, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash

# --- Hack Club AI Configuration ---
HACKCLUB_API_URL = "https://ai.hackclub.com/chat/completions"
# Placeholder for context that the LLM can use, set to IGCSE context
IGCSE_INFO_TEXT = "The user is studying IGCSE level content in Math, Physics, Biology, and Chemistry. Focus your answers on curriculum topics."
# --- End AI Configuration ---


app = Flask(__name__)
# IMPORTANT: Use a secure, complex key in a real application.
app.config['SECRET_KEY'] = 'super_secret_and_complex_key_for_igcse_app'
# Using sqlite for persistence
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///igcse_study.sqlite3'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# --- Database Models ---

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(250), nullable=False) # Increased size for hashed passwords
    flashcards = db.relationship('Flashcard', backref='owner', lazy=True)

class Flashcard(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    topic = db.Column(db.String(100), nullable=False)
    question = db.Column(db.Text, nullable=False)
    answer = db.Column(db.Text, nullable=False)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# --- API for Frontend Persistence ---

@app.route('/save_flashcards', methods=['POST'])
@login_required
def save_flashcards():
    """
    Saves flashcards generated by the frontend LLM call (or manually created) 
    to the database for the current logged-in user.
    """
    try:
        data = request.get_json()
        flashcards_data = data.get('flashcards', [])

        if not flashcards_data:
            return jsonify({'message': 'No flashcards provided to save.'}), 200

        new_flashcards = []
        for fc in flashcards_data:
            # Assuming the flashcards sent from the frontend have 'topic', 'question', and 'answer'
            new_flashcard = Flashcard(
                user_id=current_user.id,
                topic=fc.get('topic', 'Unassigned'),
                question=fc.get('question'),
                answer=fc.get('answer')
            )
            new_flashcards.append(new_flashcard)

        db.session.bulk_save_objects(new_flashcards)
        db.session.commit()
        return jsonify({'message': f'{len(new_flashcards)} flashcards saved successfully!'})

    except Exception as e:
        db.session.rollback()
        print(f"Error saving flashcards: {e}")
        return jsonify({'error': 'Failed to save flashcards due to a server error.'}), 500

# --- Hack Club AI Chat Endpoint ---

@app.route("/chat", methods=["POST"])
@login_required # Protect the API endpoint
def chat():
    data = request.get_json()
    user_message = data.get("message", "").strip()

    if not user_message:
        return jsonify({"reply": "⚠️ Please type a message."})

    try:
        # System Instruction for the IGCSE TutorBot
        system_content = (
            "You are IGCSE TutorBot, an extremely helpful and strict assistant for students studying IGCSE "
            "level content. Your responses must be concise, straightforward, and delivered as the final answer only. "
            "Do not include any reasoning, thoughts, or conversational filler. "
            "Your responses should be in Markdown format."
        )
        
        req = urllib.request.Request(
            HACKCLUB_API_URL,
            data=json.dumps({
                "model": "gpt-4o-mini",
                "messages": [
                    {
                        "role": "system",
                        "content": system_content
                    },
                    {
                        "role": "user",
                        "content": IGCSE_INFO_TEXT + "\n" + user_message + " (Do not include any reasoning or internal thought process in your final output.)"
                    }
                ],
                "max_tokens": 400
            }).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_data = json.loads(response.read().decode('utf-8'))
                # Extract the reply from the Hack Club API response structure
                reply = response_data['choices'][0]['message']['content']
                
                return jsonify({"reply": reply})
            else:
                # Read error response body if available
                error_body = response.read().decode('utf-8', errors='ignore')
                print(f"Hack Club API Error Status {response.status}: {error_body}")
                return jsonify({"reply": "⚠️ Error connecting to Hack Club AI API."})

    except urllib.error.HTTPError as e:
        # Catch specific HTTP errors
        print(f"HTTP Error: {e.code}, {e.read().decode('utf-8', errors='ignore')}")
        return jsonify({"reply": "⚠️ Error connecting to Hack Club AI API due to an HTTP error."})
    except Exception as e:
        print("General Error:", e)
        return jsonify({"reply": "⚠️ An unexpected error occurred while processing the request."})

# --- Authentication Routes ---

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('profile'))
    if request.method == 'POST':
        user = User.query.filter_by(username=request.form['username']).first()
        if user and check_password_hash(user.password, request.form['password']):
            login_user(user, remember=True)
            return redirect(url_for('profile'))
        flash('Invalid username or password', 'error')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('profile'))
    if request.method == 'POST':
        try:
            hashed_password = generate_password_hash(request.form['password'], method='pbkdf2:sha256')
            new_user = User(username=request.form['username'], email=request.form['email'], password=hashed_password)
            db.session.add(new_user)
            db.session.commit()
            flash('Account created successfully! You are now logged in.', 'success')
            login_user(new_user)
            return redirect(url_for('profile'))
        except Exception as e:
            db.session.rollback()
            flash('Registration failed. Username or Email might already be taken.', 'error')
            print(f"Registration Error: {e}")
            return redirect(url_for('register'))
    return render_template('register.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out.', 'info')
    return redirect(url_for('index'))

# --- Application Routes ---

@app.route('/')
def index():
    if current_user.is_authenticated:
        return redirect(url_for('profile'))
    return render_template('index.html')

@app.route('/profile')
@login_required
def profile():
    return render_template('profile.html')

@app.route('/chatbot')
@login_required
def chatbot():
    # Renders the chatbot interface, which will make POST requests to the new /chat endpoint
    return render_template('chatbot.html')

@app.route('/flashcards')
@login_required
def flashcards():
    user_flashcards = Flashcard.query.filter_by(user_id=current_user.id).order_by(Flashcard.topic).all()
    return render_template('flashcards.html', flashcards=user_flashcards)


if __name__ == '__main__':
    with app.app_context():
        # Creates tables and adds initial data if not present
        db.create_all()
    app.run(debug=True, port=5001)
